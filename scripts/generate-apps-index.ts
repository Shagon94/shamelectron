const appsDir = `${import.meta.dirname}/../lib/apps`;
const outFile = `${appsDir}/index.ts`;

const glob = new Bun.Glob("*.ts");
const files = Array.from(glob.scanSync(appsDir))
  .filter((f) => !f.match(/index(\.ts|\.d\.ts)$/) && !f.endsWith(".d.ts"))
  .sort();

const exportRegex = /export\s+const\s+(\w+)\s*:\s*AppMeta\b/;

// Read all files in parallel for speed
const fileReads = files.map((relPath) => {
  const absPath = `${appsDir}/${relPath}`;
  return Bun.file(absPath)
    .text()
    .then((src) => ({ relPath, src }));
});

const fileContents = await Promise.all(fileReads);

const exportMap: Array<{ symbol: string; importPath: string }> = [];

for (const { relPath, src } of fileContents) {
  const m = exportRegex.exec(src);
  if (!m) continue;
  const symbol = m[1]!;
  const base = relPath.replace(/\.ts$/, "");
  exportMap.push({ symbol, importPath: `./${base}` });
}

exportMap.sort((a, b) => a.symbol.localeCompare(b.symbol));

const imports = exportMap
  .map(({ symbol, importPath }) => `import { ${symbol} } from "${importPath}";`)
  .join("\n");
const items = exportMap.map(({ symbol }) => `  ${symbol},`).join("\n");

const content = `// AUTO-GENERATED AUTOMATICALLY BEFORE DEV/BUILD
// â€” DO NOT EDIT THIS FILE 
// - DO NOT EDIT THIS FILE 
// - DO NOT EDIT THIS FILE 
// Generated at: ${new Date().toISOString()}

${imports}
import type { AppMeta } from "../../types";
export const APPS: AppMeta[] = [\n${items}\n].sort((a, b) => a.id.localeCompare(b.id));
`;

await Bun.write(outFile, content);
console.log(`Generated index.ts with ${exportMap.length} modules.`);

export {};
